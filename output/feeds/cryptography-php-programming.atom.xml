<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Coding, Learning and IT Security</title><link href="/" rel="alternate"></link><link href="/feeds/cryptography-php-programming.atom.xml" rel="self"></link><id>/</id><updated>2013-11-14T22:55:00+01:00</updated><entry><title>Cryptographically secure rand() replacement</title><link href="/cryptographically-secure-rand-replacement.html" rel="alternate"></link><updated>2013-11-14T22:55:00+01:00</updated><author><name>admin</name></author><id>tag:,2013-11-14:cryptographically-secure-rand-replacement.html</id><summary type="html">&lt;p&gt;If you are a programmer, you sometimes find yourself in the need for
random numbers. There are many possible use cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generate data for unit-tests.&lt;/li&gt;
&lt;li&gt;Build secure passwords or keys as input for ciphers like AES,
    Twofish and its colleagues.&lt;/li&gt;
&lt;li&gt;Simulating the real world for modelling applications.&lt;/li&gt;
&lt;li&gt;A prominent use case: Lot's of gambling sites depend on good random
    number generators.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now if you code in PHP, there are quite some different ways to obtain
random numbers. There is the &lt;a href="http://www.php.net/manual/en/function.rand.php" title="rand"&gt;&lt;em&gt;rand ( int \$min , int \$max
)&lt;/em&gt;&lt;/a&gt; function for
instance: It yields a random number within the range specified by the
\$min and \$max parameters.&lt;/p&gt;
&lt;p&gt;The documentation states that this approach isn't particularly secure
and shouldn't be used for applications that need to feed algorithms with
cryptographically secure random data. Then there's &lt;a href="http://www.php.net/manual/en/function.mt-rand.php"&gt;&lt;em&gt;mt_rand ( int
\$min , int \$max )&lt;/em&gt;&lt;/a&gt;
that apparently creates &lt;em&gt;better&lt;/em&gt; random values. Certainly not suitable
for crypto purposes as well.&lt;br /&gt;
There were/are quite some applications concerned with security bugs
because of using rand() or mt_rand() for passwords, encryption keys,
session cookies, CSRF tokens and the like. See also this link to a
related discussion on
&lt;a href="http://security.stackexchange.com/questions/18033/how-insecure-are-phps-rand-functions"&gt;security.stackexchange.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But because of convenience of the \$min, \$max interfaces of rand() and
mt_rand() and it's intuitive handling, I implemented the same interface
for a cryptographically secure pseudo random number generator:
&lt;a href="http://www.php.net/manual/en/function.openssl-random-pseudo-bytes.php"&gt;&lt;em&gt;openssl_random_pseudo_bytes ( int \$length [, bool
&amp;amp;\$crypto_strong ]
)&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is the function that does the job:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="o"&gt;*&lt;/span&gt; 
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;Generates&lt;/span&gt; &lt;span class="nx"&gt;cryptographically&lt;/span&gt; &lt;span class="nx"&gt;secure&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="nx"&gt;including&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;$start&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;$stop&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; 
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;good&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;especiall&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;ranges&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;Calls&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;openssl_random_pseudo_bytes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;cached&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="nx"&gt;$LUT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; 
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;For&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;need&lt;/span&gt; &lt;span class="nx"&gt;only&lt;/span&gt; &lt;span class="nx"&gt;around&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;calls&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;openssl_random_pseudo_bytes&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;obtain&lt;/span&gt; 
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="nx"&gt;between&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;ensures&lt;/span&gt; &lt;span class="nx"&gt;good&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;Both&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt; &lt;span class="nx"&gt;need&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;positive&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;If&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;need&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;negative&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;just&lt;/span&gt; &lt;span class="nx"&gt;pass&lt;/span&gt; &lt;span class="nx"&gt;positiv&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;then&lt;/span&gt; &lt;span class="nx"&gt;make&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="nx"&gt;negative&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;own&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;If&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;returns&lt;/span&gt; &lt;span class="nx"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;something&lt;/span&gt; &lt;span class="nx"&gt;went&lt;/span&gt; &lt;span class="nx"&gt;wrong&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;Always&lt;/span&gt; &lt;span class="nx"&gt;check&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;===&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;otherwise&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;fail&lt;/span&gt; &lt;span class="nx"&gt;might&lt;/span&gt; &lt;span class="nx"&gt;shadow&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;valid&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;zero&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="nx"&gt;pass&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt; &lt;span class="nx"&gt;parameter&lt;/span&gt; &lt;span class="nx"&gt;$secure&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;If&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;cryptographically&lt;/span&gt; &lt;span class="nx"&gt;secure&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="nx"&gt;was&lt;/span&gt; &lt;span class="nx"&gt;generated&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; 
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;staticvar&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="nx"&gt;$LUT&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;lookup&lt;/span&gt; &lt;span class="nx"&gt;table&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="nx"&gt;bytes&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;calls&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;secure_random_number&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt; &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;$start&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt; &lt;span class="nx"&gt;border&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt; &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;$stop&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="nx"&gt;border&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;bool&lt;/span&gt; &lt;span class="nx"&gt;$secure&lt;/span&gt; &lt;span class="nx"&gt;Whether&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;call&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;openssl_random_pseudo_bytes&lt;/span&gt; &lt;span class="nx"&gt;was&lt;/span&gt; &lt;span class="nx"&gt;made&lt;/span&gt; &lt;span class="nx"&gt;securely&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt; &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;$calls&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;calls&lt;/span&gt; &lt;span class="nx"&gt;already&lt;/span&gt; &lt;span class="nx"&gt;made&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="nx"&gt;integer&lt;/span&gt; &lt;span class="nx"&gt;within&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;range&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;including&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="kr"&gt;throws&lt;/span&gt; &lt;span class="nx"&gt;InvalidArgumentException&lt;/span&gt; &lt;span class="nx"&gt;Thrown&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;invalid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="kr"&gt;throws&lt;/span&gt; &lt;span class="nx"&gt;UnexpectedValueException&lt;/span&gt; &lt;span class="nx"&gt;Thrown&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;openssl_random_pseudo_bytes&lt;/span&gt; &lt;span class="nx"&gt;was&lt;/span&gt; &lt;span class="nx"&gt;called&lt;/span&gt; &lt;span class="nx"&gt;unsecurely&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="kr"&gt;throws&lt;/span&gt; &lt;span class="nx"&gt;ErrorException&lt;/span&gt; &lt;span class="nx"&gt;Thrown&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;unpack&lt;/span&gt; &lt;span class="nx"&gt;fails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;secure_rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$stop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;$secure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;True&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$calls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$start&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;$stop&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;$stop&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;$start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;InvalidArgumentException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Either stop= 65536 &amp;amp;&amp;amp; $range &amp;lt; 4294967296) {&lt;/span&gt;
&lt;span class="s2"&gt;        $format = &amp;#39;L&amp;#39;;&lt;/span&gt;
&lt;span class="s2"&gt;        $num_bytes &amp;lt;&amp;lt;= 3;&lt;/span&gt;
&lt;span class="s2"&gt;    }&lt;/span&gt;

&lt;span class="s2"&gt;    /* Before we do anything, lets see if we have a random value in the LUT within our range */&lt;/span&gt;
&lt;span class="s2"&gt;    if (is_array($LUT) &amp;amp;&amp;amp; !empty($LUT) &amp;amp;&amp;amp; $last_lu === $format) {&lt;/span&gt;
&lt;span class="s2"&gt;        foreach ($LUT as $key =&amp;gt; $value) {&lt;/span&gt;
&lt;span class="s2"&gt;            if ($value &amp;gt;= $start &amp;amp;&amp;amp; $value &amp;lt;= $stop) {&lt;/span&gt;
&lt;span class="s2"&gt;                $secure = True;&lt;/span&gt;
&lt;span class="s2"&gt;                unset($LUT&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;); // Next run, next value, as my dad always said!&lt;/span&gt;
&lt;span class="s2"&gt;                return $value;&lt;/span&gt;
&lt;span class="s2"&gt;            }&lt;/span&gt;
&lt;span class="s2"&gt;        }&lt;/span&gt;
&lt;span class="s2"&gt;    }&lt;/span&gt;

&lt;span class="s2"&gt;    /* Get a blob of cryptographically secure random bytes */&lt;/span&gt;
&lt;span class="s2"&gt;    $binary = openssl_random_pseudo_bytes($num_bytes, $crypto_strong);&lt;/span&gt;

&lt;span class="s2"&gt;    if ($crypto_strong == False) {&lt;/span&gt;
&lt;span class="s2"&gt;        throw new UnexpectedValueException(&amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;openssl_random_bytes&lt;/span&gt; &lt;span class="nx"&gt;cannot&lt;/span&gt; &lt;span class="nx"&gt;access&lt;/span&gt; &lt;span class="nx"&gt;secure&lt;/span&gt; &lt;span class="nx"&gt;PRNG&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;);&lt;/span&gt;
&lt;span class="s2"&gt;    }&lt;/span&gt;

&lt;span class="s2"&gt;    /* unpack data into previously determined format */&lt;/span&gt;
&lt;span class="s2"&gt;    $data = unpack($format . &amp;#39;*&amp;#39;, $binary);&lt;/span&gt;
&lt;span class="s2"&gt;    if ($data == False) {&lt;/span&gt;
&lt;span class="s2"&gt;        throw new ErrorException(&amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;unpack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;);&lt;/span&gt;
&lt;span class="s2"&gt;    }&lt;/span&gt;

&lt;span class="s2"&gt;    //Update lookup-table&lt;/span&gt;
&lt;span class="s2"&gt;    $LUT = $data;&lt;/span&gt;
&lt;span class="s2"&gt;    $last_lu = $format;&lt;/span&gt;

&lt;span class="s2"&gt;    foreach ($data as $value) {&lt;/span&gt;
&lt;span class="s2"&gt;        $value = intval($value, $base = 10);&lt;/span&gt;
&lt;span class="s2"&gt;        if ($value &amp;lt;= $range) {&lt;/span&gt;
&lt;span class="s2"&gt;            $secure = True;&lt;/span&gt;
&lt;span class="s2"&gt;            return ($start + $value);&lt;/span&gt;
&lt;span class="s2"&gt;        }&lt;/span&gt;
&lt;span class="s2"&gt;    }&lt;/span&gt;

&lt;span class="s2"&gt;    $calls++;&lt;/span&gt;
&lt;span class="s2"&gt;    if ($calls &amp;gt;= 50) { /* Fall back to rand() if the numbers of recursive calls exceed 50 */&lt;/span&gt;
&lt;span class="s2"&gt;        $secure = False;&lt;/span&gt;
&lt;span class="s2"&gt;        return rand($start, $stop);&lt;/span&gt;
&lt;span class="s2"&gt;    } else {/* If we could&amp;#39;t locate integer in the range, try again as long as we do not try more than 50 times. */&lt;/span&gt;
&lt;span class="s2"&gt;        return secure_rand($start, $stop, $secure, $calls);&lt;/span&gt;
&lt;span class="s2"&gt;    }&lt;/span&gt;
&lt;span class="s2"&gt;}&lt;/span&gt;
&lt;span class="s2"&gt;/*&lt;/span&gt;
&lt;span class="s2"&gt; * $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$&lt;/span&gt;
&lt;span class="s2"&gt; * $                 Some tests. Ignore.                 $&lt;/span&gt;
&lt;span class="s2"&gt; * $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$&lt;/span&gt;
&lt;span class="s2"&gt; */&lt;/span&gt;


&lt;span class="s2"&gt;function test($start, $stop) {&lt;/span&gt;
&lt;span class="s2"&gt;    static $num_called = 1;&lt;/span&gt;
&lt;span class="s2"&gt;    $val = secure_rand($start, $stop, $secure);&lt;/span&gt;
&lt;span class="s2"&gt;    echo &amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;Random&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;$num_called&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;;&lt;/span&gt;
&lt;span class="s2"&gt;    var_dump($val);&lt;/span&gt;
&lt;span class="s2"&gt;    echo &amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;Generated&lt;/span&gt; &lt;span class="nx"&gt;securely&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; . (($secure == True) ? &amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;yes&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; : &amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;no&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;) . &amp;quot;&amp;quot;;&lt;/span&gt;
&lt;span class="s2"&gt;    $num_called++;&lt;/span&gt;
&lt;span class="s2"&gt;}&lt;/span&gt;

&lt;span class="s2"&gt;function performance() {&lt;/span&gt;
&lt;span class="s2"&gt;    // My appraoch&lt;/span&gt;
&lt;span class="s2"&gt;    $start = microtime(true);&lt;/span&gt;
&lt;span class="s2"&gt;    // That is also very fast!&lt;/span&gt;
&lt;span class="s2"&gt;    foreach (range(0, 20000) as $i) {&lt;/span&gt;
&lt;span class="s2"&gt;        secure_rand(0, 200);&lt;/span&gt;
&lt;span class="s2"&gt;    }&lt;/span&gt;
&lt;span class="s2"&gt;    $stop = microtime(true);&lt;/span&gt;
&lt;span class="s2"&gt;    printf(&amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;Elapsed&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;secure_random_number&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, $stop - $start);&lt;/span&gt;

&lt;span class="s2"&gt;    // With rand()&lt;/span&gt;
&lt;span class="s2"&gt;    $start = microtime(true);&lt;/span&gt;
&lt;span class="s2"&gt;    foreach (range(0, 20000) as $i) {&lt;/span&gt;
&lt;span class="s2"&gt;        rand(0, 200);&lt;/span&gt;
&lt;span class="s2"&gt;    }&lt;/span&gt;
&lt;span class="s2"&gt;    $stop = microtime(true);&lt;/span&gt;
&lt;span class="s2"&gt;    printf(&amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;Elapsed&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$stop&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;$start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100100000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Critical call. There&amp;#39;s a high probability that the function will fail.&lt;/span&gt;
&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It essentially prompts for 2\^13 random bytes and then splits this blob
of data either in bytes, shorts or longs depending on your specified
range. It then just iterates over these tokens and looks whether we
found a candidate. If not, we call the function again (recursive step).
For further calls, we collect all unused bytes in a look-up table to
avoid making to much calls to the slow openssl_random_pseudo_bytes()
function. This increases performance a bit.&lt;/p&gt;
&lt;p&gt;We try to find a random value in the obtained range maximally 50 times.
If we exceed a recursive depth of 50, we just return the weak and
insecure rand(). You can verify with the \$secure boolean parameter
whether we found such a candidate securely or if we needed to fall back
to rand().&lt;/p&gt;
&lt;p&gt;There is no guarantee that the function will always find a value that
fits, especially in the ranges up to 2\^32. If we search for a value in
the range (100000000, 100070000) for instance, we actually look for a
long value that is between 0 and 70000. There are maximally 50*2\^13/4
long values where we can search such a value (Because we request 8192/4
long values per function call and all in all, we have maximally 50
recursive calls).&lt;br /&gt;
But the probability that a single random long value lies in this range
is roughly around 1/(2\^32/2\^16) = 1/(2\^16), which in turn means that
with our 50*2\^13/4 long values we have a 2\^16/50*2\^13/4 \~= 1:1
chance that we will find one (The calculation is a rough estimate
though).&lt;/p&gt;
&lt;p&gt;The worst (rare) case that can happen: You end up using rand(). But as
mentioned, you can check for this (rare) case with the boolean input
parameter...&lt;/p&gt;
&lt;p&gt;But in most cases you don't have this concerns and you are good to go!&lt;/p&gt;
&lt;p&gt;To finish, here is a picture that illustrates the distribution of
secure_rand() output:&lt;/p&gt;
&lt;p&gt;[caption id="attachment_567" align="alignnone" width="300"]&lt;a href="http://incolumitas.com/wp-content/uploads/2013/11/out.png"&gt;&lt;img alt="Random
distribution of
secure_rand()" src="http://incolumitas.com/wp-content/uploads/2013/11/out.png" /&gt;&lt;/a&gt;
The output of secure_rand() visualized as points in a canvas.[/caption]&lt;/p&gt;</summary><category term="PHP"></category><category term="Programming"></category><category term="security"></category></entry></feed>